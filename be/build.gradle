plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.sonarqube" version "6.0.1.5171"
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

jacoco {
    toolVersion = '0.8.11'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "$/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

sonar {
    properties {
        property "sonar.projectKey", "ohhyungsuh_nursey"
        property "sonar.organization", "ohhyungsuh"
        property "sonar.host.url", "https://sonarcloud.io"
        /*property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"*/
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"

        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'

        property 'sonar.exclusions', '**/resources/**, **/*Application*.java, **/*Controller*.java, **/*Config.java' +
                '**/*Request.java, **/*Dto.java, **/*Response.java, **/*Exception.java, **/support/**, **/config/**'
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // web, validation
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.security:spring-security-test'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // db
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // util
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok' // 테스트 의존성 추가
    testAnnotationProcessor 'org.projectlombok:lombok' // 테스트 의존성 추가

    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.10.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-mail' // 이메일 인증 위한 의존성 추가
}

tasks.named('test') {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}